pipeline {
    agent {
        dockerfile {
            filename 'docker/dockerfile-java'
            additionalBuildArgs '--build-arg JENKINS_USER_ID=`id -u jenkins` --build-arg JENKINS_GROUP_ID=`id -g jenkins`'
        }
    }

    stages {
        stage('Test - data-collectors') {
            parallel {
                stage('airquality-appabz') {
                    steps {
                        sh 'cd data-collectors/airquality-appabz && mvn clean compile test -U'
                    }
                }
                stage('bikesharing-algorab') {
                    steps {
                        sh 'cd data-collectors/bikesharing-algorab && mvn clean compile test -U'
                    }
                }
                stage('carsharing-halapi') {
                    steps {
                        sh 'cd data-collectors/carsharing-halapi && mvn clean compile test -U'
                    }
                }
                stage('emobility-echarging') {
                    steps {
                        sh 'cd data-collectors/emobility-echarging && mvn clean compile test -U'
                    }
                }
                stage('emobility-hydrogen') {
                    steps {
                        sh 'cd data-collectors/emobility-hydrogen && mvn clean compile test -U'
                    }
                }
                stage('environment-appa-tenminutes') {
                    steps {
                        sh 'cd data-collectors/environment-appa/appatn_tenminutes && mvn clean compile'
                    }
                }
                stage('environment-appa-opendata') {
                    steps {
                        sh 'cd data-collectors/environment-appa/appatn_opendata && mvn clean compile'
                    }
                }
                stage('environment-appa-bz') {
                    steps {
                        sh 'cd data-collectors/environment-appa/appabz_opendata && mvn clean compile'
                    }
                }
                stage('meteorology-siag (ZRX-data-collector)') {
                    steps {
                        sh 'cd data-collectors/meteorology-siag/zrx2json && mvn install'
                        sh 'cd data-collectors/meteorology-siag/ZRX-data-collector && mvn clean compile test -U'
                    }
                }
                stage('meteorology-siag (zrx2json)') {
                    steps {
                        sh 'cd data-collectors/meteorology-siag/zrx2json && mvn clean compile test -U'
                    }
                }
                stage('meteorology-provincetrento') {
                    steps {
                        sh 'cd data-collectors/meteo-tn/ && mvn clean compile test -U'
                    }
                }
                stage('parking-MeBo') {
                    steps {
                        sh 'cd data-collectors/parking-MeBo && mvn clean compile test -U'
                    }
                }
                stage('parking-tn') {
                    steps {
                        sh 'test -d data-collectors/parking-tn && { cd data-collectors/parking-tn; mvn clean compile test; } || true'
                    }
                }
                stage('roadweather-famas') {
                    steps {
                        sh 'cd data-collectors/roadweather-famas && mvn clean compile test -U'
                    }
                }
                stage('traffic-a22') {
                    steps {
                        sh 'cd data-collectors/traffic-a22/A22Connector/ && mvn clean compile test -U'
                    }
                }
                stage('vehicletraffic-bluetooth') {
                    steps {
                        sh 'cd data-collectors/vehicletraffic-bluetooth && mvn clean compile test -U'
                    }
                }
                stage('traffic-bz') {
                    steps {
                        sh 'cd data-collectors/traffic-bz/ && mvn clean compile test -U'
                    }
                }
            }
        }

        stage('Test - webservices') {
            parallel {
                stage('bdp-api') {
                    steps {
                        sh 'cd webservices/bdp-api/ && mvn clean compile test -U'
                    }
                }
            }
        }
    }
}
